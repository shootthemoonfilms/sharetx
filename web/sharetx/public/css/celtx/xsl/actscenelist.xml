<?xml version="1.0" encoding="UTF-8"?>

<!--
/* ***** BEGIN LICENCE BLOCK *****
 * Version: CePL 1.1
 * 
 * The contents of this file are subject to the Celtx Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.celtx.com/CePL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Celtx Script Manager.
 * 
 * The Initial Developer of the Original Code is Chad House and 4067479
 * Canada Inc. t/a CELTX.
 * 
 * Portions created by Chad House are Copyright (C) 2000-2004 Chad House,
 * parts created by Celtx are Copyright (C) 4067479 Canada Inc. All Rights
 * Reserved.
 * 
 * Contributor(s):
 *
 ***** END LICENCE BLOCK ***** */
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:output method="xml" version="1.0" encoding="UTF-8"/>

  <xsl:variable name="lcase">abcdefghijklmnopqrstuvwxyz</xsl:variable>
  <xsl:variable name="ucase">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>

  <xsl:template match="html">
    <sequences>
      <xsl:apply-templates select="body/p[@class='act']"/>
    </sequences>
  </xsl:template>

  <xsl:template match="p[@class='act']">
    <act id="{@id}"
         title="{translate(normalize-space(.), $lcase, $ucase)}"
         ordinal="{count(preceding-sibling::p[@class='act'])+1}">
      <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
      <xsl:if test="$next/@class != 'act'">
        <xsl:apply-templates select="$next"/>
      </xsl:if>
    </act>
  </xsl:template>

  <xsl:template match="p[@class='sceneheading']">
    <scene id="{@id}"
           title="{translate(normalize-space(.), $lcase, $ucase)}"/>
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'act'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="p">
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'act'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
