<?xml version="1.0"?>

<!--
/* ***** BEGIN LICENCE BLOCK *****
 * Version: CePL 1.1
 * 
 * The contents of this file are subject to the Celtx Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.celtx.com/CePL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Celtx Script Manager.
 * 
 * The Initial Developer of the Original Code is Chad House and 4067479
 * Canada Inc. t/a CELTX.
 * 
 * Portions created by Chad House are Copyright (C) 2000-2004 Chad House,
 * parts created by Celtx are Copyright (C) 4067479 Canada Inc. All Rights
 * Reserved.
 * 
 * Contributor(s):
 *
 ***** END LICENCE BLOCK ***** */
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

  <xsl:output method="xml" version="1.0" encoding="UTF-8"/>

  <xsl:variable name="lcase">abcdefghijklmnopqrstuvwxyz</xsl:variable>
  <xsl:variable name="ucase">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable>

<!--
  <xsl:template match="html">
    <xsl:variable name="title" select="string(head/title)"/>
    <script title="{$title}">
      <xsl:apply-templates select="body/p[@class='sceneheading']"/>
    </script>
  </xsl:template>
-->

  <xsl:template match="p[@class='sceneheading']">
    <scene id="{@id}" title="{normalize-space(.)}">
      <xsl:apply-templates select="span[@ref]"/>
      <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
      <xsl:if test="$next/@class != 'sceneheading'">
        <xsl:apply-templates select="$next"/>
      </xsl:if>
    </scene>
  </xsl:template>

  <xsl:template match="p[@class='act']">
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'sceneheading'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="p">
    <!-- Import character paragraphs as if they were cast span tags -->
    <xsl:if test="@class = 'character'">
      <char name="{translate(normalize-space(.), $lcase, $ucase)}"/>
    </xsl:if>
    <xsl:apply-templates select="span[@ref]"/>
    <xsl:variable name="next" select="following-sibling::p[position()=1]"/>
    <xsl:if test="$next/@class != 'sceneheading'">
      <xsl:apply-templates select="$next"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="span[@ref]">
    <item ref="{@ref}" class="{@class}">
      <!--
      <xsl:if test="@class = 'cast'">
      -->
        <xsl:attribute name="name"><xsl:value-of
          select="normalize-space(.)"/></xsl:attribute>
      <!--
      </xsl:if>
      -->
    </item>
  </xsl:template>

</xsl:stylesheet>
